"""
Unit tests for merge_csv_with_excel.py automation pipeline integration.
Covers: valid input, invalid input, edge cases, and error conditions.
"""
import os
import unittest

import extracting_machines.merge_csv_with_excel as merge_csv_with_excel


class TestMergeCsvWithExcel(unittest.TestCase):
    """Tests for merge_csv_with_excel.py automation pipeline integration."""

    def setUp(self) -> None:
        self.valid_csv = 'tests/automation/extracting_machine/data/valid_report.csv'
        self.valid_excel = 'tests/automation/extracting_machine/data/valid_master.xlsx'
        self.invalid_csv = 'tests/automation/extracting_machine/data/invalid_report.csv'
        self.invalid_excel = 'tests/automation/extracting_machine/data/invalid_master.xlsx'
        self.empty_csv = 'tests/automation/extracting_machine/data/empty_report.csv'
        self.empty_excel = 'tests/automation/extracting_machine/data/empty_master.xlsx'
        self.missing_file = 'tests/automation/extracting_machine/data/missing_file.csv'
        os.makedirs('tests/automation/extracting_machine/data', exist_ok=True)
        # Create sample valid CSV and Excel
        with open(self.valid_csv, 'w') as f:
            f.write('Company,Table,Machine_1,Machine_2,Machine_3\nFirma A GmbH,AKTIVA,123456,123,\n')
        import pandas as pd
        df = pd.DataFrame({'Firma1': ['Firma A GmbH'], 'Ort': ['Berlin'], 'URL': ['http://example.com']})
        df.to_excel(self.valid_excel, index=False)
        # Create invalid CSV (malformed)
        with open(self.invalid_csv, 'w') as f:
            f.write('not a csv')
        # Create empty CSV and Excel
        with open(self.empty_csv, 'w') as f:
            f.write('Company,assets\n')  # Use correct header with uppercase 'C'
        pd.DataFrame().to_excel(self.empty_excel, index=False)

    def tearDown(self) -> None:
        for f in [self.valid_csv, self.invalid_csv, self.empty_csv, self.valid_excel, self.invalid_excel, self.empty_excel]:
            if os.path.exists(f):
                os.remove(f)
        # Remove any merged output files generated by main()
        for file in os.listdir('.'):
            if file.startswith('merged_data_') and file.endswith('.csv'):
                os.remove(file)

    def test_main_validInput_mergesCsvAndExcel_expectedCsvCreated(self):
        """main_validInput_mergesCsvAndExcel_expectedCsvCreated: Should merge CSV and Excel into output CSV for valid input"""
        output_file = merge_csv_with_excel.main(self.valid_csv, self.valid_excel)
        if output_file:
            self.assertTrue(os.path.exists(output_file), f"Merged output CSV was not created: {output_file}")
        else:
            self.fail("Output file was not created.")

    def test_main_invalidInput_malformedCsv_raisesValueError_expectedException(self):
        """main_invalidInput_malformedCsv_raisesValueError_expectedException: Should raise ValueError for malformed CSV input"""
        with self.assertRaises(ValueError):
            merge_csv_with_excel.main(self.invalid_csv)

    def test_main_emptyInput_createsNoOutput_expectedNoOutput(self):
        """main_emptyInput_createsNoOutput_expectedNoOutput: Should not create output for empty input files"""
        output_file = merge_csv_with_excel.main(self.empty_csv)
        if output_file:
            self.assertFalse(os.path.exists(output_file), f"Output file should not be created for empty input files: {output_file}")
        else:
            self.assertTrue(True)

    def test_main_missingInputFile_raisesFileNotFoundError_expectedException(self):
        """main_missingInputFile_raisesFileNotFoundError_expectedException: Should raise FileNotFoundError for missing input file"""
        with self.assertRaises(FileNotFoundError):
            merge_csv_with_excel.main(self.missing_file)

if __name__ == '__main__':
    unittest.main()
